========================================================================
    CONSOLE APPLICATION : 14_16_pubfsm Project Overview
========================================================================

This project demonstrates the use of AREG framework features to build a Finite-State Machine (FSM). This 
demonstrates a simple traffic light control for vehicles and pedestrians. The FSM and codes are not optimized for 
real life, in reality it is to demonstrate how FSM is created, how timers and events are integrated.

The project consists of 3 sub-projects:
    1. generated    (14_generated   ) -- is a static library of generated codes and common objects used by other processes.
    2. ipclightctrl (16_ipcfsmsvc   ) -- is a console application that contains Public and Local services and the state-machine (FSM).
    3. ipctraffic   (14_ipctraffic  ) -- is a console application that is supposed to be vehicle and pedestrian traffic lights (i.e. service clients).

All communications pass through mcrouter (multicasting router). Since in AREG SDK the service discovery is 
automated, it does not matter the order of processes to start. The system will start working when logical client 
and logical server get connection via mcrouter. This approach forms a mist network and extends the fog network to 
the extreme edge.

The demonstrated FSM uses an event and a few timers that are processed by FSM. The code of services and FSM are 
generated by code generator. The service and FSM design tools are at the moment in the development phase.

////////////////////////////////////////////////////////////////////////

        1. Project 'generated' / 16_generated

Generated code of the service interface documents located in './res' sub-folder.
The documents are created by the interface designing tool. In addition, it contains implementation of components 
that are used in other projects. The project is compiled as a static library.


////////////////////////////////////////////////////////////////////////

        2. Project 'ipcfsmsvc' / 16_ipcfsmsvc

This project creates an instance of traffic light service that contains a finite state-machine (FSM).
A local service is used for interaction with the user that is triggering appropriate jobs on the service 
side to run FSM.
-- To start the traffic light controller, the user needs to type "on" => "start".
-- To stop the traffic light controller, the user needs to type "stop" => "off" (optional).
-- To quit the application(s), the user needs to type "quit".


////////////////////////////////////////////////////////////////////////

        3. Project 'ipcfsmclient' / 16_ipcfsmclient

This project contains an instance of a traffic lights client that gets the light state and outputs on console.
It dynamically creates models that are loaded during run-time. There can be multiple instances of an application 
run on the same or multiple machines. The traffic light has symbolic directions South-North and East-West. 
When start, each application should select a role:
- Type "sn" for the traffic light state that controls South-North direction.
- Type "ew" for the traffic light state that controls East-West direction.
