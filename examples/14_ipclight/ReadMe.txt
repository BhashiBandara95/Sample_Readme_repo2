========================================================================
    CONSOLE APPLICATION : 14_ipclight Project Overview
========================================================================

14_ipclight is a simple traffic light application to demonstrate custom event
creating, sending and processing, as well as creating and starting a model during runtime.

The project consits of 3 separate sub-projects:
    1. lightcommon  (14_lightcommon ) -- is a static library, contains collection of ultra-small servers and clients servicing objects used by other applications.
    2. lightctrl    (14_lightctrl   ) -- is a console application, contains instances of public and local services. It creates and processes custom events.
    3. trafficlight (14_trafficlight) -- is a console application, contains instances of public service client. It dynamically creates and loads model during runtime.

All communications pass through mcrouter (multi-casting router). Regardless it is recommended that in IPC to start the "mcrouter" first,
since in AREG SDK the service discovery is automatic, it does not matter the order of processes to start. The system will start working 
when mcrouter process is available and as soon as client and server nodes get logical connection, the communication starts.
This approach forms a mist network and provides mist-computing on extreme edge, and extends fog network.

////////////////////////////////////////////////////////////////////////

        1. Project 'lightcommon' / 14_lightcommon
        
The 'lightcommon' project contains collection of generated server and client objects, which are used in other applications.
The classes are generated from service interface design documents located in "res" subfolder of areg-sdk.
The documents are created with design tool (right now in progress) and generated by code generator (see in "tools" subfolder).


////////////////////////////////////////////////////////////////////////

        2. Project 'lightctrl' / 14_lightctrl
        
The 'lightcommon' project contains instance of public and local service. When application starts, the user needs to type one of following commands:
- "start" to set lights ON and start the job.
- "stop" to stop the job and set light states OFF.
- "quit" or "q", to stop and exit applications. This will also close all clients.

The 'lightctrl' uses static model. 
It sends and processes custom events.
Start and stop timers.

When run, type 'start' and press <Enter> to start changing light states.

////////////////////////////////////////////////////////////////////////

        3. Project 'trafficlight' / 14_trafficlight
        
The 'trafficlight' project contains instance of traffic light client that outputs light state in directions
South-North and East-West. Make a selection before expect to change light states.
When 14_lightcommon stops and quits application, the 'trafficlight' project closes as well.

It as well dynamically creates and loads model.
There can be multiple instances of service clients. Start several applications and choose the traffic direct (South-North or East-West) to start getting notifications.
