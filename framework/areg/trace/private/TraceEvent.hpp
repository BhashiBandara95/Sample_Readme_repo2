#ifndef AREG_TRACE_PRIVATE_TRAEVENT_HPP
#define AREG_TRACE_PRIVATE_TRAEVENT_HPP
/************************************************************************
 * \file        areg/trace/private/TraceEvent.hpp
 * \ingroup     AREG Asynchronous Event-Driven Communication Framework
 * \author      Artak Avetyan (mailto:artak@aregtech.com)
 * \brief       AREG Platform, The logging thread, which is receiving logging events and performs log operations. 
 ************************************************************************/
/************************************************************************
 * Include files.
 ************************************************************************/
#include "areg/base/GEGlobal.h"
#include "areg/component/TEEvent.hpp"
#include "areg/base/SharedBuffer.hpp"

/************************************************************************
 * Dependencies
 ************************************************************************/
class LogMessage;

//////////////////////////////////////////////////////////////////////////
// TraceEventData class declaration
//////////////////////////////////////////////////////////////////////////
/**
 * \brief   The tracing (or logging) event is triggered each time when application
 *          needs a logging action to be performed. The event is forwarded to a logging thread
 *          for further processing, like configuring logging, output message, etc.
 *          The logging event contains data with the instruction to perform certain actions.
 *          This logging event data is automatically generated by system, when a certain API
 *          is called.
 **/
class AREG_API TraceEventData
{
//////////////////////////////////////////////////////////////////////////
// Internal types and constants
//////////////////////////////////////////////////////////////////////////
public:
    /**
     * \brief   The list of supported actions for logging
     **/
    typedef enum E_TraceAction
    {
          TraceUndefined                //!< Action is undefined, do nothing
        , TraceConfigure                //!< Action to notify to configure logging
        , TraceChangeConfig             //!< Action to notify to change configuration
        , TraceStartLogs                //!< Action to notify to start logging
        , TraceStopLogs                 //!< Action to notify to stop logging
        , TraceEnableLogs               //!< Action to notify to enable logging
        , TraceDisableLogs              //!< Action to notify to stop logging
        , TraceChangeScopes             //!< Action to notify the scopes have changes
        , TraceSaveScopes               //!< Action to notify to save scope list
        , TraceMessage                  //!< Action to output logging message
        , TraceThreadRegistered         //!< Action to notify the logging thread registered
        , TraceThreadUnregistered       //!< Action to notify the logging thread unregistered
        , TraceChangeStack              //!< Action to notify the to change logging stack size
        , TraceProcessModuleId          //!< Action to set process module ID
    } eTraceAction;

    /**
     * \brief   Converts and returns the string of TraceEventData::eTraceAction value
     **/
    static inline const char * getString( TraceEventData::eTraceAction action );

//////////////////////////////////////////////////////////////////////////
// Constructors / Destructor
//////////////////////////////////////////////////////////////////////////
public:
    /**
     * \brief   Creates the logging even data with undefined action
     **/
    TraceEventData( void );

    /**
     * \brief   Creates the logging even data with specified action
     * \param   action  The action ID to set in event data
     **/
    TraceEventData( TraceEventData::eTraceAction action );
    
    /**
     * \brief   Creates the logging even data with specified action and data
     * \param   action      The action ID to set in event data
     * \param   dataBuffer  The buffer of data set.
     **/
    TraceEventData( TraceEventData::eTraceAction action, const SharedBuffer & dataBuffer );

    /**
     * \brief   Creates the logging even data with specified action and logging message data
     * \param   action  The action ID to set in event data
     * \param   logData The buffer of logging message data set.
     **/
    TraceEventData( TraceEventData::eTraceAction action, const LogMessage & logData );

    /**
     * \brief   Copies logging event data from given source.
     * \param   src     The source to copy data.
     **/
    TraceEventData( const TraceEventData & src );

    /**
     * \brief   Destructor
     **/
    ~TraceEventData( void );

//////////////////////////////////////////////////////////////////////////
// Operators
//////////////////////////////////////////////////////////////////////////
public:
    /**
     * \brief   Copies data from given source
     * \param   src     The source of data to copy.
     **/
    const TraceEventData & operator = ( const TraceEventData & src );

//////////////////////////////////////////////////////////////////////////
// Attributes
//////////////////////////////////////////////////////////////////////////

    /**
     * \brief   Returns the value of action set in event data.
     **/
    inline TraceEventData::eTraceAction getTraceAction( void ) const;

    /**
     * \brief   Returns the streaming buffer for writing.
     **/
    inline SharedBuffer & getWritableStream( void );

    /**
     * \brief   Returns the streaming buffer for reading.
     **/
    inline const SharedBuffer & getReadableStream( void ) const;

//////////////////////////////////////////////////////////////////////////
// Member variables
//////////////////////////////////////////////////////////////////////////
private:
    TraceEventData::eTraceAction  mAction;
    SharedBuffer                  mDataBuffer;
};

//////////////////////////////////////////////////////////////////////////
// Tracing Event and Consumer declaration
//////////////////////////////////////////////////////////////////////////

/**
 * \brief   Declare TraceEvent class, derived from TEEvent object,
 *          and IETraceEventConsumer class, derived from TEEventConsumer object
 **/
DECLARE_EVENT(TraceEventData, TraceEvent, IETraceEventConsumer)

//////////////////////////////////////////////////////////////////////////
// TraceEventData class inline functions
//////////////////////////////////////////////////////////////////////////

inline TraceEventData::eTraceAction TraceEventData::getTraceAction( void ) const
{
    return mAction;
}

inline SharedBuffer & TraceEventData::getWritableStream( void )
{
    return mDataBuffer;
}

inline const SharedBuffer & TraceEventData::getReadableStream( void ) const
{
    return mDataBuffer;
}

inline const char * TraceEventData::getString( TraceEventData::eTraceAction action )
{
    switch ( action )
    {
    CASE_MAKE_STRING(TraceEventData::TraceUndefined);
    CASE_MAKE_STRING(TraceEventData::TraceConfigure);
    CASE_MAKE_STRING(TraceEventData::TraceChangeConfig);
    CASE_MAKE_STRING(TraceEventData::TraceStartLogs);
    CASE_MAKE_STRING(TraceEventData::TraceStopLogs);
    CASE_MAKE_STRING(TraceEventData::TraceEnableLogs);
    CASE_MAKE_STRING(TraceEventData::TraceDisableLogs);
    CASE_MAKE_STRING(TraceEventData::TraceChangeScopes);
    CASE_MAKE_STRING(TraceEventData::TraceSaveScopes);
    CASE_MAKE_STRING(TraceEventData::TraceMessage);
    CASE_MAKE_STRING(TraceEventData::TraceThreadRegistered);
    CASE_MAKE_STRING(TraceEventData::TraceThreadUnregistered);
    CASE_MAKE_STRING(TraceEventData::TraceChangeStack);
    CASE_DEFAULT("ERR: Undefined TraceEventData::eTraceAction value!");
    }
}

#endif  // AREG_TRACE_PRIVATE_TRAEVENT_HPP
